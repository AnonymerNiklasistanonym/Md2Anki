# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python CI/CD

on:
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+b?'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Run check [main.py]
      run: python main.py --version
    - name: Run check [run.sh]
      if: matrix.os == 'ubuntu-latest'
      run: ./run.sh --version
    - name: Run check [run.ps1]
      run: ./run.ps1 --version


  formatting:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black
    - name: Check formatting
      run: python -m black --check src setup.py main.py clean.py update_readme.py tests examples


  examples:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Install external dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install clang librsvg2-bin nodejs pandoc texlive-xetex
    - name: Install external dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm miktex nodejs pandoc rsvg-convert
    - name: Install external dependencies
      run: |
        npm install -g ts-node
        python -m pip install numpy matplotlib
    - name: Check if examples can be ran without errors
      run: python -m examples
      working-directory: examples


  tests:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Install external dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install clang librsvg2-bin nodejs pandoc texlive-xetex
    - name: Install external dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm miktex nodejs pandoc rsvg-convert
    - name: Install external dependencies
      run: |
        npm install -g ts-node
        python -m pip install numpy matplotlib
    - name: Check if tests can be ran without errors
      run: python -m unittest
      working-directory: tests


  package:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    needs:
    - build
    - tests

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Create Python package
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
        python -m build
    - name: Install Python package [Linux]
      if: matrix.os == 'ubuntu-latest'
      run: python -m pip install "$(ls | grep .*.whl)"
      working-directory: dist
    - name: Install Python package [Windows]
      if: matrix.os == 'windows-latest'
      run: python -m pip install ((Get-ChildItem .).Name | Select-String -Pattern ".*.whl")
      working-directory: dist
    - name: Test if Python package installation was successful
      run: |
        md2anki --version
        md2anki "basic_example.md"
        md2anki "images_example.md" -file-dir "."
      working-directory: examples
    - name: Publish package
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
    - name: Create checksums for the Python package files [Linux]
      if: matrix.os == 'ubuntu-latest'
      run: |
        CHECKSUM_FILE="checksums_sha256.txt"
        sha256sum "$(ls | grep .*.tar.gz)" > "$CHECKSUM_FILE"
        sha256sum "$(ls | grep .*.whl)" >> "$CHECKSUM_FILE"
        sha256sum -c "$CHECKSUM_FILE"
      working-directory: dist
    - name: Create checksums for the Python package files [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        $CHECKSUM_FILE = "checksums_sha256.txt"
        $FILEHASH_TAR = Get-Filehash "*.tar.gz" -Algorithm SHA256
        $FILEHASH_WHL = Get-Filehash "*.whl" -Algorithm SHA256
        ($FILEHASH_TAR.Hash + '  ' + (Split-Path $FILEHASH_TAR.Path -Leaf)).ToLower() | Out-File -FilePath $CHECKSUM_FILE
        ($FILEHASH_WHL.Hash + '  ' + (Split-Path $FILEHASH_WHL.Path -Leaf)).ToLower() | Out-File -FilePath $CHECKSUM_FILE -Append
      working-directory: dist
    - name: Archive package files
      uses: actions/upload-artifact@v3
      with:
        name: python_package_files_${{ matrix.os }}
        path: |
          dist/**/*.tar.gz
          dist/**/*.whl
          dist/checksums_sha256.txt
        retention-days: 7

  # Creates a GitHub release if a new tag was pushed
  create-github-release:

    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    # Only create a GitHub release if a new tag was pushed that starts with v
    # and if the package step was successful
    needs: package
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v3
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
    - name: Create automatic GitHub release
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
         repo_token: "${{ secrets.GITHUB_TOKEN }}"
         automatic_release_tag: "${{ github.ref_name }}"
         prerelease: true
         title: "${{ github.ref_name }}"
         files: python_package_files_${{ matrix.os }}/*
